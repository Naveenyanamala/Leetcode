class Solution {
    public int past(int m,int n, int[][] grid,int[][] dp){
        if(n==0 && m==0) return grid[0][0];
        if(n<0 || m<0 ) return (int) Math.pow(10,9);

        if(dp[m][n]!=-1) return dp[m][n];

        int up= grid[m][n]+past(m-1,n,grid,dp);
        int left=grid[m][n]+past(m,n-1,grid,dp);
        return dp[m][n]=Math.min(up,left);
    }
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n= grid[0].length;
        int[][] dp=new int[m][n];
        for(int[] row:dp)
            Arrays.fill(row,-1);
        return past(m-1,n-1,grid,dp);
    }
}
